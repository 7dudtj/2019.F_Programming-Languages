Programming Assignment #3: Implementing the Untyped ル-Calculus (100 Points)
Welcome to the third programming assignment for CSI3103 @ Yonsei University for Fall 2019!

In this assignment, you will implement the untyped ル-calculus. Specifically, you will implement a step function which reduces a given expression according to the reduction rules of the untyped ル-calculus. The step function is equivalent to the reduction operator ?.

The major objective of this assignment is to make you think how we can translate inference/reduction rules into an algorithm. As the untyped ル-calculus is a set of an inductive definition (i.e., expression e ::= x | ルx.e | e1 e2) and inference/reduction rules, implementing the untyped ル-calculus (i.e., the step function) will require you to rewrite the inference rules into the corresponding Haskell code. In other words, we will now implement a PL (rather than simply studying PLs) in the PL course :)

Please complete and submit this programming assignment by 23:59 on Dec. 1st (Sun). As usual, you should upload your source code to YSCEC and no late submissions will be accepted.

Notices
[Nov. 28th, 2019] Updates to the Examples

There have been some bug fixes to the examples. Please double-check your implementations against the updated examples.

[Nov. 28th, 2019] More Examples

We now provide more examples for testing your functions stepCallByName and stepCallByValue. Please refer to the updated examples below.

[Nov. 25th, 2019] A Utility Function getFreshVariable

When you implement the substitution for [e'/x]ルy.e = ルz.[e'/x][y♀z]e case, you may now obtain z by invoking a utility function named getFreshVariable; invoke function getFreshVariable with y, e and e' as input arguments (i.e., getFreshVariable y e e') to obtain z for ルz.[e'/x][y♀z]e. In addition, you may assume that all variable names does not have an apostrophe (i.e., ').

In case you don't see function getFreshVariable in your code, please copy and paste the following code between functions getFreeVariables and substitute:

-- getFreshVariable
getFreshVariable :: TVar -> Expr -> Expr -> TVar
getFreshVariable varName e e' =
  let
    union :: [TVar] -> [TVar] -> [TVar]
    union [] l2 = l2
    union (h1:t1) l2 =
      if elem h1 l2 then
        union t1 l2
      else
        union t1 (l2 ++ [h1])

    getAllNames :: Expr -> [TVar]
    getAllNames (Var varName) = [varName]
    getAllNames (Abs (varName, e')) = union [varName] (getAllNames e')
    getAllNames (App (e1, e2)) = union (getAllNames e1) (getAllNames e2)

    isFreshVar :: TVar -> Bool
    isFreshVar [] = True
    isFreshVar (h:t) = (h == '\'') && isFreshVar t

    findLongestFreshVar :: TVar -> [TVar] -> TVar -> TVar
    findLongestFreshVar targetVarName [] longestFreshVar = longestFreshVar
    findLongestFreshVar targetVarName (h:t) longestFreshVar =
      let
        prefix  = take (length targetVarName) h
        postfix = drop (length targetVarName) h
      in
        if (prefix == targetVarName
            && isFreshVar postfix
            && length h > length longestFreshVar) then
          findLongestFreshVar targetVarName t h
        else
          findLongestFreshVar targetVarName t longestFreshVar
    
    allNames = union (getAllNames e) (getAllNames e')
  in
    (findLongestFreshVar varName allNames varName) ++ "'"

FYI, function getFreshVariable appends an apostrophe (i.e., ') after the given varName to generate a fresh variable for z. To avoid any potential variable name conflicts, the function first finds the existing fresh variable which has y as its prefix, and has the largest number of apostrophe(s) after the prefix in e and e'. Then, the function appends an additional apostrophe to create a fresh variable which does not conflict with the existing fresh variables generated by invoking the function with y in e and e'. Examples of invoking function getFreshVariable are:

-- generate a fresh variable to replace/swap x (from Var "x'''")
GHCi> getFreshVariable "x" (App (Var "x", Abs ("y", App (Var "x'''", Var "y''")))) (Var "z''''")
=> "x''''"

-- generate a fresh variable to replace/swap y (from Var "y''")
GHCi> getFreshVariable "y" (App (Var "x", Abs ("y", App (Var "x'''", Var "y''")))) (Var "z''''")
=> "y'''"

-- generate a fresh variable to replace/swap z (from Var "z''''")
GHCi> getFreshVariable "z" (App (Var "x", Abs ("y", App (Var "x'''", Var "y''")))) (Var "z''''")
=> "z'''''"

[Nov. 25th, 2019] The Definition of Expr

The definition of Expr has been updated so that you can better inspect whether your functions work correctly. In case you are using the previous definition, please replace the definition of Expr with:

data Expr = Var TVar | Abs (TVar, Expr) | App (Expr, Expr) deriving (Show)

FAQs
Q: Can I use pre-defined keywords?
A: Yes. Starting with this assignment, please use whatever pre-defined keywords you wish to use. However, do not import any external modules (e.g., Data.List).

Function stepCallByName
This function should implement the call-by-name strategy of the untyped ル-calculus. When invoked with a reducible expression (redex), apply only a single reduction step to the given redex and return the resulting expression. If the given expression is non-reducible, return the given expression as is.

The two reduction rules for the call-by-name strategy are:

      e1 ? e1'
------------------- Lam     ------------------------- App
   e1 e2 ? e1' e2            (ルx.e) e' ? [e'/x]e

To express the expressions of the untyped ル-calculus in Haskell, let us use the following definition:

-- 'TVar' as the type for variables
type TVar = String

-- 'Var' for variables
-- 'Abs' for ル-abstractions
-- 'App' for ル-applications
data Expr = Var TVar
          | Abs (TVar, Expr)
          | App (Expr, Expr)

where TVar denotes the type of the names of variables, Var is the type of the variables, Abs is the type of the ル-abstractions, and App is the type of the ル-applications. According to the syntax, examples of the expressions are:

x               --> Var "x"
ルx.x           --> Abs ("x", Var "x")
ルx.ルy.x y     --> Abs ("x", Abs ("y", App (Var "x", Var "y")))
(ルx.x) y       --> App (Abs ("x", Var "x"), Var "y")
(ルx.x) (ルy.y) --> App (Abs ("x", Var "x"), Abs ("y", Var "y"))

According to the expressions and the call-by-name strategy, your implementation for function stepCallByName should return the following values for example input expressions:

-- cannot further reduce x
stepCallByName (Var "x")
= Var "x"

-- cannot further reduce ルx.x
stepCallByName (Abs ("x", Var "x"))
= Abs ("x", Var "x")

-- apply the reduction rule Lam for ((ルx.x) y) z ? y z
stepCallByName (App (App (Abs ("x", Var "x"), Var "y"), Var "z"))
= App (Var "y", Var "z")

-- apply the reduction rule App for (ルx.x) ((ルy.y) z) ? (ルy.y) z
stepCallByName (App (Abs ("x", Var "x"), App (Abs ("y", Var "y"), Var "z")))
= App (Abs ("y", Var "y"), Var "z")

-- apply the reduction rule App for (ルy.y) z ? z
stepCallByName (App (Abs ("y", Var "y"), Var "z"))
= Var "z"

-- apply the reduction rule App for (ルx.(x x)) ((ルy.y) (ルz.z)) ? ((ルy.y) (ルz.z)) ((ルy.y) (ルz.z))
stepCallByName (App (Abs ("x", App (Var "x", Var "x")), App (Abs ("y", Var "y"), Abs ("z", Var "z"))))
= App (App (Abs ("y", Var "y"), Abs ("z", Var "z")), App (Abs ("y", Var "y"), Abs ("z", Var "z")))

-- apply the reduction rule Lam for ((ルs.ルz.s z) (ルx.x)) (ルy.y) ? (ルz.(ルx.x) z) (ルy.y)
stepCallByName (App (App (Abs ("s", Abs ("z", App (Var "s", Var "z"))), Abs ("x", Var "x")), Abs ("y", Var "y")))
= App (Abs ("z", App (Abs ("x", Var "x"), Var "z")), Abs ("y", Var "y"))

-- apply the reduction rule App for (ルz.(ルx.x) z) (ルy.y) ? (ルx.x) (ルy.y)
stepCallByName (App (Abs ("z", App (Abs ("x", Var "x"), Var "z")), Abs ("y", Var "y")))
= App (Abs ("x", Var "x"), Abs ("y", Var "y"))

-- apply the reduction rule App for (ルx.x) (ルy.y) ? (ルy.y)
stepCallByName (App (Abs ("x", Var "x"), Abs ("y", Var "y")))
= Abs ("y", Var "y")

-- apply the reduction rule App for
-- (ルx.ルy.x y) y ? [y/x]ルy.(x y)
--                 = ルz.[y/x][y♀z](x y)
--                 = ルy'.[y/x][y♀y'](x y)
--                 = ルy'.[y/x](x y')
--                 = ルy'.(y y')
stepCallByName (App (Abs ("x", Abs ("y", App (Var "x", Var "y"))), Var "y"))
= Abs ("y'", App (Var "y", Var "y'"))

-- apply the reduction rule App for
-- (ルx.ルy.x y) ((ルz.z) y) ? [((ルz.z) y)/x]ルy.(x y)
--                           = ルy'.[((ルz.z) y)/x][y♀y'](x y)     where y' = getFreshVariable y (x y) ((ルz.z) y)
--                           = ルy'.[((ルz.z) y)/x](x y')
--                           = ルy'.(((ルz.z) y) y')
stepCallByName (App (Abs ("x", Abs ("y", App (Var "x", Var "y"))), App (Abs ("z", Var "z"), Var "y")))
= Abs ("y'", App (App (Abs ("z", Var "z"), Var "y"), Var "y'"))

-- apply the reduction rule App for
-- (ルx.ルy.(x y (ルy.x y))) y ? [y/x]ルy.(x y (ルy.x y))
--                             = ルy'.[y/x][y♀y'](x y (ルy.x y))     where y' = getFreshVariable y (x y (ルy.(x y))) y
--                             = ルy'.[y/x](x y' (ルy.x y))
--                             = ルy'.(y y' [y/x](ルy.x y))
--                             = ルy'.(y y' ルy'.[y/x][y♀y'](x y))   where y' = getFreshVariable y (x y) e'
--                             = ルy'.(y y' ルy'.[y/x](x y'))
--                             = ルy'.(y y' ルy'.(y y'))
stepCallByName (App (Abs ("x", Abs ("y", App (App (Var "x", Var "y"), Abs ("y", App (Var "x", Var "y"))))), Var "y"))
= Abs ("y'", App (App (Var "y", Var "y'"), Abs ("y'", App (Var "y", Var "y'"))))

When implementing the reduction rule App, you will need to implement substitution [e'/x]e. The definition of the substitution is:

[e/x]x = e
[e/x]y = y                         if x != y
[e/x](e1 e2) = [e/x]e1 [e/x]e2
[e'/x]ルx.e = ルx.e
[e'/x]ルy.e = ルy.[e'/x]e          if x != y, y ? FV(e')
[e'/x]ルy.e = ルz.[e'/x][y♀z]e    if x != y, y ＃ FV(e') where z != y, z ? FV(e), z != x, z ? FV(e')

where FV(e) represents the set of free variables in expression e, and [y♀z]e denotes variable swapping (i.e., replace all occurences of y in e by z, and all occurrences of z in e by y). FV(e) is defined as:

FV(x) = {x}
FV(ルx.e) = FV(e) - {x}
FV(e1 e2) = FV(e1) ★ FV(e2)

For your convenience, we provide the templates for functions substitute and getFreeVariables; substitute (e', x) e for performing [e'/x]e, and getFreeVariables e for calculating FV(e). Function stepCallByName may invoke these functions to perform a reduction step.

Function stepCallByValue
This function should implement the call-by-value strategy of the untyped ル-calculus. Similar to function stepCallByName, apply only a single reduction step to a given redex according to the call-by-value strategy and return the resulting expression. In case the given expression is non-reducible, return the non-reducible expression as is.

The three reduction rules for the call-by-value strategy are:

      e1 ? e1'                       e2 ? e2'
------------------- Lam     ---------------------------- Arg     ---------------------- App
   e1 e2 ? e1' e2            (ルx.e) e2 ? (ルx.e) e2'            (ルx.e) v ? [v/x]e

where v in the reduction rule App denotes a value.

According to the call-by-value strategy, your implementation for function stepCallByValue should return the following values for example input expressions:

-- cannot further reduce x
stepCallByValue (Var "x")
= Var "x"

-- cannot further reduce ルx.x
stepCallByValue (Abs ("x", Var "x"))
= Abs ("x", Var "x")

-- apply the reduction rule Lam for ((ルx.x) y) z ? y z
stepCallByValue (App (App (Abs ("x", Var "x"), Var "y"), Var "z"))
= App (Var "y", Var "z")

-- apply the reduction rule Arg for (ルx.x) ((ルy.y) z) ? (ルx.x) z
stepCallByValue (App (Abs ("x", Var "x"), App (Abs ("y", Var "y"), Var "z")))
= App (Abs ("x", Var "x"), Var "z")

-- apply the reduction rule App for (ルx.x) z ? z
stepCallByValue (App (Abs ("x", Var "x"), Var "z"))
= Var "z"

-- apply the reduction rule Arg for (ルx.(x x)) ((ルy.y) (ルz.z)) ? (ルx.(x x)) (ルz.z)
stepCallByValue (App (Abs ("x", App (Var "x", Var "x")), App (Abs ("y", Var "y"), Abs ("z", Var "z"))))
= App (Abs ("x", App (Var "x", Var "x")), Abs ("z", Var "z"))

-- apply the reduction rule App for (ルx.(x x)) (ルz.z) ? (ルz.z) (ルz.z)
stepCallByValue (App (Abs ("x", App (Var "x", Var "x")), Abs ("z", Var "z")))
= App (Abs ("z", Var "z"), Abs ("z", Var "z"))

-- apply the reduction rule App for (ルz.z) (ルz.z) ? (ルz.z)
stepCallByValue (App (Abs ("z", Var "z"), Abs ("z", Var "z")))
= Abs ("z", Var "z")

-- apply the reduction rule Lam for ((ルs.ルz.(s z)) (ルx.x)) (ルy.y) ? (ルz.((ルx.x) z)) (ルy.y)
stepCallByValue (App (App (Abs ("s", Abs ("z", App (Var "s", Var "z"))), Abs ("x", Var "x")), Abs ("y", Var "y")))
= App (Abs ("z", App (Abs ("x", Var "x"), Var "z")), Abs ("y", Var "y"))

-- apply the reduction rule App for (ルz.((ルx.x) z)) (ルy.y) ? (ルx.x) (ルy.y)
stepCallByValue (App (Abs ("z", App (Abs ("x", Var "x"), Var "z")), Abs ("y", Var "y")))
= App (Abs ("x", Var "x"), Abs ("y", Var "y"))

-- apply the reduction rule App for (ルx.x) (ルy.y) ? (ルy.y)
stepCallByValue (App (Abs ("x", Var "x"), Abs ("y", Var "y")))
= Abs ("y", Var "y")

-- apply the reduction rule App for
-- (ルx.ルy.x y) y ? [y/x]ルy.(x y)
--                 = ルy'.[y/x][y♀y'](x y)       where y' = getFreshVariable y (x y) y
--                 = ルy'.[y/x](x y')
--                 = ルy'.(y y')
stepCallByValue (App (Abs ("x", Abs ("y", App (Var "x", Var "y"))), Var "y"))
= Abs ("y'", App (Var "y", Var "y'"))

-- apply the reduction rule Arg for
-- (ルx.ルy.x y) ((ルz.z) y) ? (ルx.ルy.x y) y
stepCallByValue (App (Abs ("x", Abs ("y", App (Var "x", Var "y"))), App (Abs ("z", Var "z"), Var "y")))
= App (Abs ("x", Abs ("y", App (Var "x", Var "y"))), Var "y")

-- apply the reduction rule App for
-- (ルx.ルy.(x y (ルy.x y))) y ? [y/x]ルy.(x y (ルy.x y))
--                             = ルz.[y/x][y♀z](x y (ルy.x y))
--                             = ルy'.[y/x][y♀y'](x y (ルy.x y))     where y' = getFreshVariable y (x y (ルy.(x y))) y
--                             = ルy'.[y/x](x y' (ルy.x y))
--                             = ルy'.(y y' ルy'.[y/x][y♀y'](x y))   where y' = getFreshVariable y (x y) e'
--                             = ルy'.(y y' ルy'.[y/x](x y'))
--                             = ルy'.(y y' ルy'.(y y'))
stepCallByValue (App (Abs ("x", Abs ("y", App (App (Var "x", Var "y"), Abs ("y", App (Var "x", Var "y"))))), Var "y"))
= Abs ("y'", App (App (Var "y", Var "y'"), Abs ("y'", App (Var "y", Var "y'"))))